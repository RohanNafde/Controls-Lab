
Expt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001174  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073f  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000929  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000862  00000000  00000000  0000314a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  74:	0c 94 40 03 	jmp	0x680	; 0x680 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcd_set_4bit>:
	motion_set(0x00);
}

void soft_stop (void)       //soft stop(stops slowly)
{
	motion_set(0x0F);
  7c:	89 ef       	ldi	r24, 0xF9	; 249
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <lcd_set_4bit+0x4>
  84:	00 c0       	rjmp	.+0      	; 0x86 <lcd_set_4bit+0xa>
  86:	00 00       	nop
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	8d 7f       	andi	r24, 0xFD	; 253
  92:	85 bb       	out	0x15, r24	; 21
  94:	80 e3       	ldi	r24, 0x30	; 48
  96:	85 bb       	out	0x15, r24	; 21
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	94 60       	ori	r25, 0x04	; 4
  9c:	95 bb       	out	0x15, r25	; 21
  9e:	e1 ee       	ldi	r30, 0xE1	; 225
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_set_4bit+0x26>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_set_4bit+0x2c>
  a8:	00 00       	nop
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	9b 7f       	andi	r25, 0xFB	; 251
  ae:	95 bb       	out	0x15, r25	; 21
  b0:	e9 ef       	ldi	r30, 0xF9	; 249
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x38>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_set_4bit+0x3e>
  ba:	00 00       	nop
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	9e 7f       	andi	r25, 0xFE	; 254
  c0:	95 bb       	out	0x15, r25	; 21
  c2:	95 b3       	in	r25, 0x15	; 21
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	95 bb       	out	0x15, r25	; 21
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	94 60       	ori	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	e1 ee       	ldi	r30, 0xE1	; 225
  d2:	f4 e0       	ldi	r31, 0x04	; 4
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_set_4bit+0x58>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_set_4bit+0x5e>
  da:	00 00       	nop
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	9b 7f       	andi	r25, 0xFB	; 251
  e0:	95 bb       	out	0x15, r25	; 21
  e2:	e9 ef       	ldi	r30, 0xF9	; 249
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_set_4bit+0x6a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_set_4bit+0x70>
  ec:	00 00       	nop
  ee:	95 b3       	in	r25, 0x15	; 21
  f0:	9e 7f       	andi	r25, 0xFE	; 254
  f2:	95 bb       	out	0x15, r25	; 21
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	9d 7f       	andi	r25, 0xFD	; 253
  f8:	95 bb       	out	0x15, r25	; 21
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	85 bb       	out	0x15, r24	; 21
 102:	81 ee       	ldi	r24, 0xE1	; 225
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_set_4bit+0x8a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_set_4bit+0x90>
 10c:	00 00       	nop
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	85 bb       	out	0x15, r24	; 21
 114:	e9 ef       	ldi	r30, 0xF9	; 249
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_set_4bit+0x9c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_set_4bit+0xa2>
 11e:	00 00       	nop
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	85 bb       	out	0x15, r24	; 21
 126:	85 b3       	in	r24, 0x15	; 21
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	85 bb       	out	0x15, r24	; 21
 130:	85 b3       	in	r24, 0x15	; 21
 132:	84 60       	ori	r24, 0x04	; 4
 134:	85 bb       	out	0x15, r24	; 21
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_set_4bit+0xbe>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_set_4bit+0xc4>
 140:	00 00       	nop
 142:	85 b3       	in	r24, 0x15	; 21
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	85 bb       	out	0x15, r24	; 21
 148:	08 95       	ret

0000014a <lcd_wr_command>:
 14a:	38 2f       	mov	r19, r24
 14c:	30 7f       	andi	r19, 0xF0	; 240
 14e:	25 b3       	in	r18, 0x15	; 21
 150:	2f 70       	andi	r18, 0x0F	; 15
 152:	25 bb       	out	0x15, r18	; 21
 154:	95 b3       	in	r25, 0x15	; 21
 156:	93 2b       	or	r25, r19
 158:	95 bb       	out	0x15, r25	; 21
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	9e 7f       	andi	r25, 0xFE	; 254
 15e:	95 bb       	out	0x15, r25	; 21
 160:	95 b3       	in	r25, 0x15	; 21
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	95 bb       	out	0x15, r25	; 21
 166:	95 b3       	in	r25, 0x15	; 21
 168:	94 60       	ori	r25, 0x04	; 4
 16a:	95 bb       	out	0x15, r25	; 21
 16c:	e1 ee       	ldi	r30, 0xE1	; 225
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_wr_command+0x26>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_wr_command+0x2c>
 176:	00 00       	nop
 178:	95 b3       	in	r25, 0x15	; 21
 17a:	9b 7f       	andi	r25, 0xFB	; 251
 17c:	95 bb       	out	0x15, r25	; 21
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	95 b3       	in	r25, 0x15	; 21
 184:	9f 70       	andi	r25, 0x0F	; 15
 186:	95 bb       	out	0x15, r25	; 21
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	89 2b       	or	r24, r25
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	85 bb       	out	0x15, r24	; 21
 194:	85 b3       	in	r24, 0x15	; 21
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	85 bb       	out	0x15, r24	; 21
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	81 ee       	ldi	r24, 0xE1	; 225
 1a2:	94 e0       	ldi	r25, 0x04	; 4
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_wr_command+0x5a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_wr_command+0x60>
 1aa:	00 00       	nop
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	08 95       	ret

000001b4 <lcd_init>:
 1b4:	89 ef       	ldi	r24, 0xF9	; 249
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x4>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_init+0xa>
 1be:	00 00       	nop
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 1d2:	8e e0       	ldi	r24, 0x0E	; 14
 1d4:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 1de:	08 95       	ret

000001e0 <lcd_wr_char>:
 1e0:	38 2f       	mov	r19, r24
 1e2:	30 7f       	andi	r19, 0xF0	; 240
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	2f 70       	andi	r18, 0x0F	; 15
 1e8:	25 bb       	out	0x15, r18	; 21
 1ea:	95 b3       	in	r25, 0x15	; 21
 1ec:	93 2b       	or	r25, r19
 1ee:	95 bb       	out	0x15, r25	; 21
 1f0:	95 b3       	in	r25, 0x15	; 21
 1f2:	91 60       	ori	r25, 0x01	; 1
 1f4:	95 bb       	out	0x15, r25	; 21
 1f6:	95 b3       	in	r25, 0x15	; 21
 1f8:	9d 7f       	andi	r25, 0xFD	; 253
 1fa:	95 bb       	out	0x15, r25	; 21
 1fc:	95 b3       	in	r25, 0x15	; 21
 1fe:	94 60       	ori	r25, 0x04	; 4
 200:	95 bb       	out	0x15, r25	; 21
 202:	e1 ee       	ldi	r30, 0xE1	; 225
 204:	f4 e0       	ldi	r31, 0x04	; 4
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 20c:	00 00       	nop
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	9b 7f       	andi	r25, 0xFB	; 251
 212:	95 bb       	out	0x15, r25	; 21
 214:	82 95       	swap	r24
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	95 b3       	in	r25, 0x15	; 21
 21a:	9f 70       	andi	r25, 0x0F	; 15
 21c:	95 bb       	out	0x15, r25	; 21
 21e:	95 b3       	in	r25, 0x15	; 21
 220:	89 2b       	or	r24, r25
 222:	85 bb       	out	0x15, r24	; 21
 224:	85 b3       	in	r24, 0x15	; 21
 226:	81 60       	ori	r24, 0x01	; 1
 228:	85 bb       	out	0x15, r24	; 21
 22a:	85 b3       	in	r24, 0x15	; 21
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	85 bb       	out	0x15, r24	; 21
 230:	85 b3       	in	r24, 0x15	; 21
 232:	84 60       	ori	r24, 0x04	; 4
 234:	85 bb       	out	0x15, r24	; 21
 236:	81 ee       	ldi	r24, 0xE1	; 225
 238:	94 e0       	ldi	r25, 0x04	; 4
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 240:	00 00       	nop
 242:	85 b3       	in	r24, 0x15	; 21
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret

0000024a <lcd_home>:
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 250:	08 95       	ret

00000252 <lcd_cursor>:
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	71 f0       	breq	.+28     	; 0x272 <lcd_cursor+0x20>
 256:	18 f4       	brcc	.+6      	; 0x25e <lcd_cursor+0xc>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	31 f0       	breq	.+12     	; 0x268 <lcd_cursor+0x16>
 25c:	08 95       	ret
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	69 f0       	breq	.+26     	; 0x27c <lcd_cursor+0x2a>
 262:	84 30       	cpi	r24, 0x04	; 4
 264:	81 f0       	breq	.+32     	; 0x286 <lcd_cursor+0x34>
 266:	08 95       	ret
 268:	8f e7       	ldi	r24, 0x7F	; 127
 26a:	86 0f       	add	r24, r22
 26c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 270:	08 95       	ret
 272:	8f eb       	ldi	r24, 0xBF	; 191
 274:	86 0f       	add	r24, r22
 276:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 27a:	08 95       	ret
 27c:	83 e9       	ldi	r24, 0x93	; 147
 27e:	86 0f       	add	r24, r22
 280:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 284:	08 95       	ret
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	86 0f       	add	r24, r22
 28a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
 28e:	08 95       	ret

00000290 <lcd_print>:
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	8a 01       	movw	r16, r20
 29a:	e9 01       	movw	r28, r18
 29c:	88 23       	and	r24, r24
 29e:	11 f0       	breq	.+4      	; 0x2a4 <lcd_print+0x14>
 2a0:	61 11       	cpse	r22, r1
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <lcd_print+0x1a>
 2a4:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_home>
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <lcd_print+0x1e>
 2aa:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cursor>
 2ae:	c5 30       	cpi	r28, 0x05	; 5
 2b0:	d1 05       	cpc	r29, r1
 2b2:	d1 f4       	brne	.+52     	; 0x2e8 <lcd_print+0x58>
 2b4:	98 01       	movw	r18, r16
 2b6:	32 95       	swap	r19
 2b8:	22 95       	swap	r18
 2ba:	2f 70       	andi	r18, 0x0F	; 15
 2bc:	23 27       	eor	r18, r19
 2be:	3f 70       	andi	r19, 0x0F	; 15
 2c0:	23 27       	eor	r18, r19
 2c2:	a7 e4       	ldi	r26, 0x47	; 71
 2c4:	b3 e0       	ldi	r27, 0x03	; 3
 2c6:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	96 95       	lsr	r25
 2d4:	87 95       	ror	r24
 2d6:	c0 96       	adiw	r24, 0x30	; 48
 2d8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <million+0x1>
 2dc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <million>
 2e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <lcd_print+0x5a>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	c4 30       	cpi	r28, 0x04	; 4
 2ec:	d1 05       	cpc	r29, r1
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <lcd_print+0x64>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	c1 f5       	brne	.+112    	; 0x364 <lcd_print+0xd4>
 2f4:	98 01       	movw	r18, r16
 2f6:	36 95       	lsr	r19
 2f8:	27 95       	ror	r18
 2fa:	36 95       	lsr	r19
 2fc:	27 95       	ror	r18
 2fe:	36 95       	lsr	r19
 300:	27 95       	ror	r18
 302:	a5 ec       	ldi	r26, 0xC5	; 197
 304:	b0 e2       	ldi	r27, 0x20	; 32
 306:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 30a:	ac 01       	movw	r20, r24
 30c:	52 95       	swap	r21
 30e:	42 95       	swap	r20
 310:	4f 70       	andi	r20, 0x0F	; 15
 312:	45 27       	eor	r20, r21
 314:	5f 70       	andi	r21, 0x0F	; 15
 316:	45 27       	eor	r20, r21
 318:	50 93 66 00 	sts	0x0066, r21	; 0x800066 <temp+0x1>
 31c:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <temp>
 320:	9a 01       	movw	r18, r20
 322:	ad ec       	ldi	r26, 0xCD	; 205
 324:	bc ec       	ldi	r27, 0xCC	; 204
 326:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	9c 01       	movw	r18, r24
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	9a 01       	movw	r18, r20
 34e:	28 1b       	sub	r18, r24
 350:	39 0b       	sbc	r19, r25
 352:	c9 01       	movw	r24, r18
 354:	c0 96       	adiw	r24, 0x30	; 48
 356:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <thousand+0x1>
 35a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <thousand>
 35e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	c3 30       	cpi	r28, 0x03	; 3
 366:	d1 05       	cpc	r29, r1
 368:	11 f0       	breq	.+4      	; 0x36e <lcd_print+0xde>
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	91 f5       	brne	.+100    	; 0x3d2 <lcd_print+0x142>
 36e:	98 01       	movw	r18, r16
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	36 95       	lsr	r19
 376:	27 95       	ror	r18
 378:	ab e7       	ldi	r26, 0x7B	; 123
 37a:	b4 e1       	ldi	r27, 0x14	; 20
 37c:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 380:	ac 01       	movw	r20, r24
 382:	56 95       	lsr	r21
 384:	47 95       	ror	r20
 386:	50 93 66 00 	sts	0x0066, r21	; 0x800066 <temp+0x1>
 38a:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <temp>
 38e:	9a 01       	movw	r18, r20
 390:	ad ec       	ldi	r26, 0xCD	; 205
 392:	bc ec       	ldi	r27, 0xCC	; 204
 394:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	9c 01       	movw	r18, r24
 3a6:	22 0f       	add	r18, r18
 3a8:	33 1f       	adc	r19, r19
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	9a 01       	movw	r18, r20
 3bc:	28 1b       	sub	r18, r24
 3be:	39 0b       	sbc	r19, r25
 3c0:	c9 01       	movw	r24, r18
 3c2:	c0 96       	adiw	r24, 0x30	; 48
 3c4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <hundred+0x1>
 3c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <hundred>
 3cc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	c2 30       	cpi	r28, 0x02	; 2
 3d4:	d1 05       	cpc	r29, r1
 3d6:	11 f0       	breq	.+4      	; 0x3dc <lcd_print+0x14c>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	81 f5       	brne	.+96     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 3dc:	98 01       	movw	r18, r16
 3de:	ad ec       	ldi	r26, 0xCD	; 205
 3e0:	bc ec       	ldi	r27, 0xCC	; 204
 3e2:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 3e6:	ac 01       	movw	r20, r24
 3e8:	56 95       	lsr	r21
 3ea:	47 95       	ror	r20
 3ec:	56 95       	lsr	r21
 3ee:	47 95       	ror	r20
 3f0:	56 95       	lsr	r21
 3f2:	47 95       	ror	r20
 3f4:	50 93 66 00 	sts	0x0066, r21	; 0x800066 <temp+0x1>
 3f8:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <temp>
 3fc:	9a 01       	movw	r18, r20
 3fe:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	9c 01       	movw	r18, r24
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	82 0f       	add	r24, r18
 422:	93 1f       	adc	r25, r19
 424:	9a 01       	movw	r18, r20
 426:	28 1b       	sub	r18, r24
 428:	39 0b       	sbc	r19, r25
 42a:	c9 01       	movw	r24, r18
 42c:	c0 96       	adiw	r24, 0x30	; 48
 42e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <tens+0x1>
 432:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tens>
 436:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	c1 30       	cpi	r28, 0x01	; 1
 43e:	d1 05       	cpc	r29, r1
 440:	11 f0       	breq	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	09 f5       	brne	.+66     	; 0x488 <__stack+0x29>
 446:	98 01       	movw	r18, r16
 448:	ad ec       	ldi	r26, 0xCD	; 205
 44a:	bc ec       	ldi	r27, 0xCC	; 204
 44c:	0e 94 31 03 	call	0x662	; 0x662 <__umulhisi3>
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	9c 01       	movw	r18, r24
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	82 0f       	add	r24, r18
 470:	93 1f       	adc	r25, r19
 472:	98 01       	movw	r18, r16
 474:	28 1b       	sub	r18, r24
 476:	39 0b       	sbc	r19, r25
 478:	c9 01       	movw	r24, r18
 47a:	c0 96       	adiw	r24, 0x30	; 48
 47c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <unit+0x1>
 480:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <unit>
 484:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 488:	26 97       	sbiw	r28, 0x06	; 6
 48a:	1c f0       	brlt	.+6      	; 0x492 <__stack+0x33>
 48c:	85 e4       	ldi	r24, 0x45	; 69
 48e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	08 95       	ret

0000049c <motion_pin_config>:
 49c:	87 b3       	in	r24, 0x17	; 23
 49e:	8f 60       	ori	r24, 0x0F	; 15
 4a0:	87 bb       	out	0x17, r24	; 23
 4a2:	88 b3       	in	r24, 0x18	; 24
 4a4:	80 7f       	andi	r24, 0xF0	; 240
 4a6:	88 bb       	out	0x18, r24	; 24
 4a8:	81 b3       	in	r24, 0x11	; 17
 4aa:	80 63       	ori	r24, 0x30	; 48
 4ac:	81 bb       	out	0x11, r24	; 17
 4ae:	82 b3       	in	r24, 0x12	; 18
 4b0:	80 63       	ori	r24, 0x30	; 48
 4b2:	82 bb       	out	0x12, r24	; 18
 4b4:	08 95       	ret

000004b6 <motion_set>:
 4b6:	8f 70       	andi	r24, 0x0F	; 15
 4b8:	98 b3       	in	r25, 0x18	; 24
 4ba:	90 7f       	andi	r25, 0xF0	; 240
 4bc:	89 2b       	or	r24, r25
 4be:	88 bb       	out	0x18, r24	; 24
 4c0:	08 95       	ret

000004c2 <forward>:
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
 4c8:	08 95       	ret

000004ca <left>:
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
 4d0:	08 95       	ret

000004d2 <right>:
 4d2:	8a e0       	ldi	r24, 0x0A	; 10
 4d4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
 4d8:	08 95       	ret

000004da <soft_left>:
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
 4e0:	08 95       	ret

000004e2 <soft_right>:
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
 4e8:	08 95       	ret

000004ea <adc_init>:
}

//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 4ea:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	87 b9       	out	0x07, r24	; 7
	ACSR = 0x80;
 4f0:	80 e8       	ldi	r24, 0x80	; 128
 4f2:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 4f4:	86 e8       	ldi	r24, 0x86	; 134
 4f6:	86 b9       	out	0x06, r24	; 6
 4f8:	08 95       	ret

000004fa <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 4fa:	84 b3       	in	r24, 0x14	; 20
 4fc:	87 6f       	ori	r24, 0xF7	; 247
 4fe:	84 bb       	out	0x14, r24	; 20
	PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 500:	85 b3       	in	r24, 0x15	; 21
 502:	80 78       	andi	r24, 0x80	; 128
 504:	85 bb       	out	0x15, r24	; 21
 506:	08 95       	ret

00000508 <adc_pin_config>:
}

//ADC pin configuration	
void adc_pin_config (void)
{
	DDRA = 0x00;   //set PORTF direction as input
 508:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;  //set PORTF pins floating
 50a:	1b ba       	out	0x1b, r1	; 27
 50c:	08 95       	ret

0000050e <port_init>:
}

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 50e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_port_config>
	adc_pin_config();
 512:	0e 94 84 02 	call	0x508	; 0x508 <adc_pin_config>
	motion_pin_config();
 516:	0e 94 4e 02 	call	0x49c	; 0x49c <motion_pin_config>
 51a:	08 95       	ret

0000051c <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
 51c:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xFF; //setup
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x01;
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	9c bd       	out	0x2c, r25	; 44
	OCR1AH = 0x00;
 526:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 528:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x00;
 52a:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0xFF;
 52c:	88 bd       	out	0x28, r24	; 40
	ICR1H  = 0x00;
 52e:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0xFF;
 530:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0xA1;
 532:	81 ea       	ldi	r24, 0xA1	; 161
 534:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x0D; //start Timer
 536:	8d e0       	ldi	r24, 0x0D	; 13
 538:	8e bd       	out	0x2e, r24	; 46
 53a:	08 95       	ret

0000053c <init_devices>:
}


void init_devices (void)
{
	cli(); //Clears the global interrupts
 53c:	f8 94       	cli
	port_init();
 53e:	0e 94 87 02 	call	0x50e	; 0x50e <port_init>
	adc_init();
 542:	0e 94 75 02 	call	0x4ea	; 0x4ea <adc_init>
	sei(); //Enables the global interrupts
 546:	78 94       	sei
	timer1_init();
 548:	0e 94 8e 02 	call	0x51c	; 0x51c <timer1_init>
 54c:	08 95       	ret

0000054e <velocity>:
	TCCR1B = 0x0D; //start Timer
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR1AL = left_motor;
 54e:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = right_motor;
 550:	68 bd       	out	0x28, r22	; 40
 552:	08 95       	ret

00000554 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;
 554:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 556:	80 62       	ori	r24, 0x20	; 32
 558:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
 55a:	86 b1       	in	r24, 0x06	; 6
 55c:	80 64       	ori	r24, 0x40	; 64
 55e:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 560:	34 9b       	sbis	0x06, 4	; 6
 562:	fe cf       	rjmp	.-4      	; 0x560 <ADC_Conversion+0xc>
	a=ADCH;
 564:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 566:	96 b1       	in	r25, 0x06	; 6
 568:	90 61       	ori	r25, 0x10	; 16
 56a:	96 b9       	out	0x06, r25	; 6
	return a;
}
 56c:	08 95       	ret

0000056e <main>:

//Main Function
int main(void)
{
	init_devices();
 56e:	0e 94 9e 02 	call	0x53c	; 0x53c <init_devices>
	lcd_set_4bit();
 572:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_set_4bit>
	lcd_init();
 576:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>
	int x = 0;
	int kp = 5, ki = 0.7, kd = 0.1;

	while(1)
	{
		l = ADC_Conversion(3);
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 aa 02 	call	0x554	; 0x554 <ADC_Conversion>
 580:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <l>
		c = ADC_Conversion(4);
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	0e 94 aa 02 	call	0x554	; 0x554 <ADC_Conversion>
 58a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <c>
		r = ADC_Conversion(5);
 58e:	85 e0       	ldi	r24, 0x05	; 5
 590:	0e 94 aa 02 	call	0x554	; 0x554 <ADC_Conversion>
 594:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		lcd_print(1, 1, l, 3);
 598:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <l>
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	23 e0       	ldi	r18, 0x03	; 3
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
		lcd_print(1, 5, c, 3);
 5aa:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <c>
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	23 e0       	ldi	r18, 0x03	; 3
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	65 e0       	ldi	r22, 0x05	; 5
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
		lcd_print(1, 9, r, 3);
 5bc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	23 e0       	ldi	r18, 0x03	; 3
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	69 e0       	ldi	r22, 0x09	; 9
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
	
		error = r-l;
 5ce:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <l>
 5d8:	c8 1b       	sub	r28, r24
 5da:	d1 09       	sbc	r29, r1
		sum += error;
		if(x != 0)
			delta = error - prev_error;
		prev_error = error;
		left_speed = 150 + (kp*error + ki*sum + kd*delta);
 5dc:	ce 01       	movw	r24, r28
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	8c 0f       	add	r24, r28
 5e8:	9d 1f       	adc	r25, r29
 5ea:	8a 56       	subi	r24, 0x6A	; 106
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
		right_speed = 150 + (kp*error + ki*sum + kd*delta);
	
		velocity(left_speed, right_speed);
 5ee:	68 2f       	mov	r22, r24
 5f0:	0e 94 a7 02 	call	0x54e	; 0x54e <velocity>
	
		if(l > 8 && r > 8)
 5f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <l>
 5f8:	89 30       	cpi	r24, 0x09	; 9
 5fa:	38 f0       	brcs	.+14     	; 0x60a <main+0x9c>
 5fc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 600:	99 30       	cpi	r25, 0x09	; 9
 602:	18 f0       	brcs	.+6      	; 0x60a <main+0x9c>
			forward();
 604:	0e 94 61 02 	call	0x4c2	; 0x4c2 <forward>
 608:	09 c0       	rjmp	.+18     	; 0x61c <main+0xae>
		else if(l >= 8 && l < 9)
 60a:	88 30       	cpi	r24, 0x08	; 8
 60c:	19 f4       	brne	.+6      	; 0x614 <main+0xa6>
			soft_left(); 
 60e:	0e 94 6d 02 	call	0x4da	; 0x4da <soft_left>
 612:	04 c0       	rjmp	.+8      	; 0x61c <main+0xae>
		else if(l >= 9)
 614:	89 30       	cpi	r24, 0x09	; 9
 616:	28 f0       	brcs	.+10     	; 0x622 <main+0xb4>
			left();
 618:	0e 94 65 02 	call	0x4ca	; 0x4ca <left>
	return a;
}

//Main Function
int main(void)
{
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	16 c0       	rjmp	.+44     	; 0x64e <main+0xe0>
			forward();
		else if(l >= 8 && l < 9)
			soft_left(); 
		else if(l >= 9)
			left();
		else if(r >= 8 && r < 9)
 622:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 626:	88 30       	cpi	r24, 0x08	; 8
 628:	19 f4       	brne	.+6      	; 0x630 <main+0xc2>
			soft_right();
 62a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <soft_right>
 62e:	f6 cf       	rjmp	.-20     	; 0x61c <main+0xae>
		else if(r >= 9)
 630:	89 30       	cpi	r24, 0x09	; 9
 632:	18 f0       	brcs	.+6      	; 0x63a <main+0xcc>
			right();
 634:	0e 94 69 02 	call	0x4d2	; 0x4d2 <right>
 638:	f1 cf       	rjmp	.-30     	; 0x61c <main+0xae>
		else
			forward();
 63a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <forward>
 63e:	ee cf       	rjmp	.-36     	; 0x61c <main+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 640:	e9 ef       	ldi	r30, 0xF9	; 249
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	31 97       	sbiw	r30, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <main+0xd6>
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0xdc>
 64a:	00 00       	nop
	
		for(int i = 0; i < 50*error; i++)
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	42 e3       	ldi	r20, 0x32	; 50
 650:	4c 9f       	mul	r20, r28
 652:	90 01       	movw	r18, r0
 654:	4d 9f       	mul	r20, r29
 656:	30 0d       	add	r19, r0
 658:	11 24       	eor	r1, r1
 65a:	82 17       	cp	r24, r18
 65c:	93 07       	cpc	r25, r19
 65e:	84 f3       	brlt	.-32     	; 0x640 <main+0xd2>
 660:	8c cf       	rjmp	.-232    	; 0x57a <main+0xc>

00000662 <__umulhisi3>:
 662:	a2 9f       	mul	r26, r18
 664:	b0 01       	movw	r22, r0
 666:	b3 9f       	mul	r27, r19
 668:	c0 01       	movw	r24, r0
 66a:	a3 9f       	mul	r26, r19
 66c:	70 0d       	add	r23, r0
 66e:	81 1d       	adc	r24, r1
 670:	11 24       	eor	r1, r1
 672:	91 1d       	adc	r25, r1
 674:	b2 9f       	mul	r27, r18
 676:	70 0d       	add	r23, r0
 678:	81 1d       	adc	r24, r1
 67a:	11 24       	eor	r1, r1
 67c:	91 1d       	adc	r25, r1
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
